// ------------------------------------------------------------
// Prisma Schema — Rebuilt & Optimized for Role/Permission logic
// ------------------------------------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------------------
// MODELS
// ---------------------------

model User {
  id                  Int       @id @default(autoincrement())
  role                String
  email               String    @unique
  emailVerifiedAt     DateTime? // ✅ Added from Laravel migration
  fullName            String
  phoneNumber         String?   @unique
  phoneVerified       Boolean   @default(false)
  kycStatus           String    @default("pending")
  approvalStatus      String    @default("pending")
  companyName         String?
  legalForm           String? // matches company_legal_form
  managerName         String?
  companyPhone        String?
  companyAddress      String?
  businessDescription String?
  legalFormDocument   String? // renamed from trade_register_document
  walletBalance       Float     @default(0)
  currency            String    @default("USD")
  referralCode        String?   @unique
  referredBy          String?
  accountType         String    @default("personal")
  agentStatus         String?   @default("pending")
  businessName        String?
  profileImage        String
  address             String
  country             String
  dateOfBirth         DateTime
  rewardsPoints       Float     @default(0)
  qrCode              String    @unique
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  passwordHash        String?
  status              String    @default("active") // ✅ Added from Laravel migration
  rememberToken       String? // ✅ Added
  stripeId            String? // ✅ Added
  pmType              String? // ✅ Added
  pmLastFour          String? // ✅ Added
  trialEndsAt         DateTime? // ✅ Added
  userType            String    @default("personal") // ✅ Added enum equivalent

  // Relations
  transactionLimits      TransactionLimits?
  sentTransactions       Transaction[]         @relation("SentTransactions")
  receivedTransactions   Transaction[]         @relation("ReceivedTransactions")
  refreshTokens          RefreshToken[]
  userRoles              UserRole[]
  otps                   Otp[]
  passwordResets         PasswordReset[]
  paymentMethods         PaymentMethod[]
  supportTickets         SupportTicket[]
  assignedSupportTickets SupportTicket[]       @relation("SupportAssignedTo")
  tontinesCreated        Tontine[]             @relation("TontineCreator")
  tontineCoAdminFor      Tontine[]             @relation("TontineCoAdmin")
  tontineMembers         TontineMember[]
  tontineContributions   TontineContribution[]
  tontineInvites         TontineInvite[]
  qrPayments             QRPayment[]           @relation("QRRecipient")
  remittancesAsAgent     Remittance[]          @relation("RemittanceAgent")
  savedContacts          SavedContact[]        @relation("SavedContactAgent")
  floatRequests          FloatRequest[]        @relation("FloatRequestAgent")
  subscriptions          Subscription[]
  sessions               Session[]
  budgets                Budget[]
}

model TransactionLimits {
  id            Int   @id @default(autoincrement())
  userId        Int   @unique
  daily         Float
  weeklyBudget  Float @default(0)
  monthlyBudget Float @default(0)
  yearlyBudget  Float @default(0)
  user          User  @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("TransactionLimits")
}

model Transaction {
  id              Int      @id @default(autoincrement())
  transactionId   String   @unique
  senderId        Int
  recipientId     Int?
  amount          Float
  currency        String   @default("USD")
  type            String
  status          String   @default("pending")
  paymentMethod   String?
  description     String?
  fee             Float    @default(0)
  exchangeRate    Float?
  referenceNumber String?
  qrCode          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  sender    User  @relation("SentTransactions", fields: [senderId], references: [id])
  recipient User? @relation("ReceivedTransactions", fields: [recipientId], references: [id])

  @@map("Transaction")
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  updatedAt       DateTime         @default(now()) // temporary default
  userRoles       UserRole[]
  rolePermissions RolePermission[]

  @@map("Role")
}

model Permission {
  id              Int              @id @default(autoincrement())
  action          String
  resource        String
  description     String?
  name            String           @default("default_name") // temporary default
  updatedAt       DateTime         @default(now()) // temporary default
  rolePermissions RolePermission[]

  @@unique([action, resource])
  @@map("Permission")
}

model UserRole {
  id     Int  @id @default(autoincrement())
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("UserRole")
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@unique([roleId, permissionId], name: "role_permission_unique") // ✅ named composite unique
  @@map("RolePermission")
}

model RefreshToken {
  id           Int           @id @default(autoincrement())
  tokenHash    String
  userId       Int
  expiresAt    DateTime
  revoked      Boolean       @default(false)
  createdAt    DateTime      @default(now())
  replacedById Int?          @unique // ✅ required for one-to-one
  user         User          @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  replacedBy   RefreshToken? @relation("ReplacedBy", fields: [replacedById], references: [id], onDelete: SetNull, onUpdate: Cascade)
  replacement  RefreshToken? @relation("ReplacedBy")

  @@map("RefreshToken")
}

model Otp {
  id        Int      @id @default(autoincrement())
  email     String
  codeHash  String
  purpose   String
  expiresAt DateTime
  used      Boolean  @default(false)
  attempts  Int      @default(0)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("Otp")
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("PasswordReset")
}

model PaymentMethod {
  id            Int      @id @default(autoincrement())
  userId        Int
  type          String
  provider      String?
  accountName   String?
  accountNumber String?
  bankName      String?
  expiryDate    String? // stored as text (per your Base44)
  isDefault     Boolean  @default(false)
  isVerified    Boolean  @default(false)
  lastFour      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@map("PaymentMethod")
}

model SupportTicket {
  id           Int      @id @default(autoincrement())
  ticketId     String?  @unique
  userId       Int
  subject      String
  description  String
  category     String?
  priority     String   @default("medium")
  status       String   @default("open")
  assignedToId Int? // admin user id (optional)
  attachments  String[] @default([])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  assignedTo User? @relation("SupportAssignedTo", fields: [assignedToId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([userId])
  @@index([assignedToId])
  @@map("SupportTicket")
}

model Tontine {
  id                    Int       @id @default(autoincrement())
  name                  String
  description           String?
  type                  String
  contributionAmount    Float
  currency              String    @default("USD")
  contributionFrequency String
  payoutInterval        String?
  startDate             DateTime?
  nextPayoutDate        DateTime?
  status                String    @default("forming")
  payoutOrder           Int[]     @default([]) // array of user ids, order of payouts
  currentRound          Int       @default(1)
  totalPot              Float     @default(0)
  maxMembers            Int?
  inviteCode            String?   @unique
  paymentMethods        String[]  @default([]) // accepted payment methods (strings)
  notificationSettings  Json? // store object: { payment_reminders: true, ... }
  creatorId             Int
  coAdminId             Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator       User                  @relation("TontineCreator", fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  coAdmin       User?                 @relation("TontineCoAdmin", fields: [coAdminId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  members       TontineMember[]
  contributions TontineContribution[]
  invites       TontineInvite[]

  @@index([creatorId])
  @@index([coAdminId])
  @@map("Tontine")
}

model TontineMember {
  id        Int      @id @default(autoincrement())
  tontineId Int
  userId    Int
  joinedAt  DateTime @default(now())
  role      String? // e.g., member, admin
  isActive  Boolean  @default(true)

  tontine Tontine @relation(fields: [tontineId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([tontineId, userId], name: "tontine_member_unique")
  @@index([tontineId])
  @@index([userId])
  @@map("TontineMember")
}

model TontineContribution {
  id               Int       @id @default(autoincrement())
  tontineId        Int
  userId           Int
  amount           Float
  currency         String    @default("USD")
  contributionDate DateTime?
  roundNumber      Int
  paymentMethod    String?
  status           String    @default("pending")
  transactionId    String?
  createdAt        DateTime  @default(now())

  tontine Tontine @relation(fields: [tontineId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([tontineId])
  @@index([userId])
  @@map("TontineContribution")
}

model QRPayment {
  id          Int       @id @default(autoincrement())
  qrCode      String    @unique
  recipientId Int
  amount      Float?
  currency    String    @default("USD")
  description String?
  isActive    Boolean   @default(true)
  expiryDate  DateTime?
  usageLimit  Int?
  usageCount  Int       @default(0)
  paymentType String    @default("one_time") // one_time, recurring, open_amount
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  recipient User @relation("QRRecipient", fields: [recipientId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([recipientId])
  @@map("QRPayment")
}

model Remittance {
  id                  Int      @id @default(autoincrement())
  agentId             Int
  senderDetails       Json // { name, phone, country }
  recipientDetails    Json // { name, phone, country, bank_name, account_number }
  bankName            String?
  accountNumber       String?
  sourceAmount        Float
  sourceCurrency      String?
  destinationAmount   Float?
  destinationCurrency String?
  exchangeRate        Float?
  deliveryMethod      String
  status              String   @default("pending")
  transactionId       String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  agent User @relation("RemittanceAgent", fields: [agentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([agentId])
  @@map("Remittance")
}

model SavedContact {
  id            Int      @id @default(autoincrement())
  agentId       Int
  contactType   String
  name          String
  phone         String?
  country       String?
  bankName      String?
  accountNumber String?
  createdAt     DateTime @default(now())

  agent User @relation("SavedContactAgent", fields: [agentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([agentId])
  @@map("SavedContact")
}

model SystemSettings {
  id                  Int      @id @default(autoincrement())
  transferFeePercent  Float    @default(1.5)
  withdrawalFeeFlat   Float    @default(2.5)
  forexMarkupPercent  Float    @default(2.0)
  cryptoMarkupPercent Float    @default(2.5)
  tontineFeePercent   Float    @default(0.5)
  updatedAt           DateTime @updatedAt
  createdAt           DateTime @default(now())

  @@map("SystemSettings")
}

model FloatRequest {
  id        Int      @id @default(autoincrement())
  agentId   Int
  amount    Float
  currency  String   @default("USD")
  status    String   @default("pending")
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  agent User @relation("FloatRequestAgent", fields: [agentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([agentId])
  @@map("FloatRequest")
}

model Session {
  id           String  @id
  userId       Int?
  ipAddress    String? @db.VarChar(45)
  userAgent    String?
  payload      String
  lastActivity Int
  user         User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
}

model Cache {
  key        String @id
  value      String
  expiration Int
}

model CacheLock {
  key        String @id
  owner      String
  expiration Int
}

model Job {
  id          Int    @id @default(autoincrement())
  queue       String
  payload     String
  attempts    Int
  reservedAt  Int?
  availableAt Int
  createdAt   Int

  @@index([queue])
}

model JobBatch {
  id           String  @id
  name         String
  totalJobs    Int
  pendingJobs  Int
  failedJobs   Int
  failedJobIds String
  options      String?
  cancelledAt  Int?
  createdAt    Int
  finishedAt   Int?
}

model FailedJob {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique
  connection String
  queue      String
  payload    String
  exception  String
  failedAt   DateTime @default(now())
}

// --------------------
// Budget / Expense
// --------------------
model Budget {
  id          Int              @id @default(autoincrement())
  userId      Int
  name        String
  period      String           @default("monthly")
  totalAmount Float
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories  BudgetCategory[]
}

model BudgetCategory {
  id          Int       @id @default(autoincrement())
  budgetId    Int
  description String?
  name        String
  color       String?
  limitAmount Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  budget      Budget    @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  expenses    Expense[]
}

model Expense {
  id               Int            @id @default(autoincrement())
  budgetCategoryId Int
  title            String
  amount           Float
  expenseDate      DateTime
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  budgetCategory   BudgetCategory @relation(fields: [budgetCategoryId], references: [id], onDelete: Cascade)
}

// --------------------
// Tontine related additions
// --------------------
model TontinePayout {
  id              Int      @id @default(autoincrement())
  tontineMemberId Int
  amount          Float
  payoutDate      DateTime
  status          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model TontineInvite {
  id          Int      @id @default(autoincrement())
  tontineId   Int
  userId      Int?
  email       String
  inviteToken String   @unique
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tontine Tontine @relation(fields: [tontineId], references: [id])
  user    User?   @relation(fields: [userId], references: [id])
}

// --------------------
// Subscription
// --------------------
model Subscription {
  id           Int       @id @default(autoincrement())
  userId       Int
  type         String
  stripeId     String    @unique
  stripeStatus String
  stripePrice  String?
  quantity     Int?
  trialEndsAt  DateTime?
  endsAt       DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionItems SubscriptionItem[]

  @@index([userId, stripeStatus])
}

model SubscriptionItem {
  id             Int      @id @default(autoincrement())
  subscriptionId Int
  stripeId       String   @unique
  stripeProduct  String
  stripePrice    String
  quantity       Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId, stripePrice])
}
